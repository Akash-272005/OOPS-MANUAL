import javax.swing.*;
import java.awt.event.*;
import java.sql.*;

public class BloodDonationSystem {
    private JFrame frame;
    private JTextField idField, nameField, bloodGroupField, contactField, addressField;
    private JTextArea displayArea;

    // Database connection details
    private static final String DB_URL = "jdbc:mysql://localhost:3306/blood_donation";
    private static final String DB_USER = "root";
    private static final String DB_PASSWORD = "12345678"; // Change to your MySQL password

    public BloodDonationSystem() {
        frame = new JFrame("Blood Donation Management System");
        frame.setSize(500, 700);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(null);

        // Labels and Text Fields
        JLabel idLabel = new JLabel("ID:");
        idLabel.setBounds(30, 30, 100, 30);
        frame.add(idLabel);

        idField = new JTextField();
        idField.setBounds(150, 30, 200, 30);
        frame.add(idField);

        JLabel nameLabel = new JLabel("Name:");
        nameLabel.setBounds(30, 80, 100, 30);
        frame.add(nameLabel);

        nameField = new JTextField();
        nameField.setBounds(150, 80, 200, 30);
        frame.add(nameField);

        JLabel bloodGroupLabel = new JLabel("Blood Group:");
        bloodGroupLabel.setBounds(30, 130, 100, 30);
        frame.add(bloodGroupLabel);

        bloodGroupField = new JTextField();
        bloodGroupField.setBounds(150, 130, 200, 30);
        frame.add(bloodGroupField);

        JLabel contactLabel = new JLabel("Contact Number:");
        contactLabel.setBounds(30, 180, 100, 30);
        frame.add(contactLabel);

        contactField = new JTextField();
        contactField.setBounds(150, 180, 200, 30);
        frame.add(contactField);

        JLabel addressLabel = new JLabel("Address:");
        addressLabel.setBounds(30, 230, 100, 30);
        frame.add(addressLabel);

        addressField = new JTextField();
        addressField.setBounds(150, 230, 200, 30);
        frame.add(addressField);

        // Buttons
        JButton addButton = new JButton("Add Donor");
        addButton.setBounds(30, 280, 120, 30);
        frame.add(addButton);
        addButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                addDonor();
            }
        });

        JButton updateButton = new JButton("Update Donor");
        updateButton.setBounds(160, 280, 120, 30);
        frame.add(updateButton);
        updateButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                updateDonor();
            }
        });

        JButton deleteButton = new JButton("Delete Donor");
        deleteButton.setBounds(290, 280, 120, 30);
        frame.add(deleteButton);
        deleteButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                deleteDonor();
            }
        });

        JButton viewButton = new JButton("View All Donors");
        viewButton.setBounds(150, 320, 140, 30);
        frame.add(viewButton);
        viewButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                viewDonors();
            }
        });

        displayArea = new JTextArea();
        displayArea.setBounds(30, 370, 400, 250);
        frame.add(displayArea);

        frame.setVisible(true);
    }

    private Connection connect() throws SQLException {
        return DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
    }

    private void addDonor() {
        String name = nameField.getText();
        String bloodGroup = bloodGroupField.getText();
        String contact = contactField.getText();
        String address = addressField.getText();

        String query = "INSERT INTO donors (name, blood_group, contact_number, address) VALUES (?, ?, ?, ?)";
        try (Connection con = connect(); PreparedStatement pst = con.prepareStatement(query)) {
            pst.setString(1, name);
            pst.setString(2, bloodGroup);
            pst.setString(3, contact);
            pst.setString(4, address);
            int result = pst.executeUpdate();

            if (result > 0) {
                JOptionPane.showMessageDialog(frame, "Donor added successfully!");
                nameField.setText("");
                bloodGroupField.setText("");
                contactField.setText("");
                addressField.setText("");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(frame, "Error adding donor.");
        }
    }

    private void updateDonor() {
        int id = Integer.parseInt(idField.getText());
        String name = nameField.getText();
        String bloodGroup = bloodGroupField.getText();
        String contact = contactField.getText();
        String address = addressField.getText();

        String query = "UPDATE donors SET name = ?, blood_group = ?, contact_number = ?, address = ? WHERE id = ?";
        try (Connection con = connect(); PreparedStatement pst = con.prepareStatement(query)) {
            pst.setString(1, name);
            pst.setString(2, bloodGroup);
            pst.setString(3, contact);
            pst.setString(4, address);
            pst.setInt(5, id);

            int result = pst.executeUpdate();
            if (result > 0) {
                JOptionPane.showMessageDialog(frame, "Donor updated successfully!");
            } else {
                JOptionPane.showMessageDialog(frame, "No donor found with ID: " + id);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(frame, "Error updating donor.");
        }
    }

    private void deleteDonor() {
        int id = Integer.parseInt(idField.getText());

        String query = "DELETE FROM donors WHERE id = ?";
        try (Connection con = connect(); PreparedStatement pst = con.prepareStatement(query)) {
            pst.setInt(1, id);

            int result = pst.executeUpdate();
            if (result > 0) {
                JOptionPane.showMessageDialog(frame, "Donor deleted successfully!");
                idField.setText("");
                nameField.setText("");
                bloodGroupField.setText("");
                contactField.setText("");
                addressField.setText("");
            } else {
                JOptionPane.showMessageDialog(frame, "No donor found with ID: " + id);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(frame, "Error deleting donor.");
        }
    }

    private void viewDonors() {
        displayArea.setText("");
        String query = "SELECT * FROM donors";
        try (Connection con = connect(); Statement stmt = con.createStatement(); ResultSet rs = stmt.executeQuery(query)) {
            while (rs.next()) {
                int id = rs.getInt("id");
                String name = rs.getString("name");
                String bloodGroup = rs.getString("blood_group");
                String contact = rs.getString("contact_number");
                String address = rs.getString("address");

                displayArea.append("ID: " + id + ", Name: " + name + ", Blood Group: " + bloodGroup +
                        ", Contact: " + contact + ", Address: " + address + "\n");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(frame, "Error retrieving donors.");
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(BloodDonationSystem::new);
    }
}
